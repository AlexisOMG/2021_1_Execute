openapi: "3.0.0"
info:
  title: "Бэкенд для Trello"
  version: "0.1.0"
tags:
  - name: Users
  - name: Boards
  - name: Rows
  - name: Tasks
paths:
  /api/upload:
    post:
      tags:
        - Users
      description: Добавление аватара
      requestBody:
        content:      
            image/*:    
             schema: 
               type: string
               format: binary
      responses:
        200:
          description: Успешно отправлено
        415:
          description: Неверный формат изображения
  /api/download:
    get:
      tags:
        - Users
      description: Загрузка аватара
      responses:
        200:
          description: Скачивание прошло успешно
          content:      
            image/*:    
              schema: 
                type: string
                format: binary
        404:
          description: Not found
  /api/login:
    post:
      tags:
        - Users
      description: Авторизация пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Авторизация прошла успешно
        400:
          description: Запрос сформирован неверно
        403:
          description: Авторизация неуспешна
  /api/logout:
    delete:
      tags:
        - Users
      description: Выход из сессии
      responses:
        200:
          description: Выход прошел успешно
        401:
          description: Неавторизованный запрос
  /api/authorized:
    get:
      tags:
        - Users
      description: Запрос на подтверждение авторизованности
      responses:
        200:
          description: Вы авторизованы
        401:
          description: Вы не авторизованы
  /api/users:
    post:
      tags:
        - Users
      description: Регистрация нового пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        200: 
          description: Пользователь успешно зарегистрирован
        400:
          description: Запрос сформирован неверно
        409:
          description: Уже создан пользователь с таким email
    get:
      tags:
        - Users
      description: Получение информации о текущем пользователе
      responses:
        200:
          description: Информация получена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Пользователь не найден
    patch:
      tags:
        - Users
      description: Изменение информации о текущем пользователе
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchUserRequest"
      responses:
        200:
          description: Информация получена
        403:
          description: Недостаточно прав
        404:
          description: Пользователь не найден
        400:
          description: Запрос сформирован неверно
    
  /api/users/{id}:
    parameters:
      - name: id
        description: ID пользователя
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Users
      description: Получение информации о пользователе
      responses:
        200:
          description: Информация получена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Пользователь не найден
    delete:
      tags:
        - Users
      description: Удаление пользователя
      responses:
        200:
          description: Пользователь удален
        404:
          description: Пользователь не найден
        403:
          description: Недостаточно прав
          
  /api/boards:
    get:
      tags:
        - Boards
      description: Получение списка досок пользователя
      responses:
        200:
          description: Доски успешно получены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBoardsResponse"
        401:
          description: Неавторизованный запрос
    post:
      tags:
        - Boards
      description: Создание доски
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostBoardsRequest"
      responses:
        200:
          description: Доска успешно создана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponses"
        401:
          description: Неавторизованный запрос
        400:
          description: Запрос сформирован неверно
  /api/boards/{id}:
    parameters:
      - name: id
        description: ID доски
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Boards
      description: Получение доски
      responses:
        200:
          description: Доска успешно получена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBoardByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Доска не найдена
        403:
          description: Недостаточно прав
    patch:
      tags:
        - Boards
      description: Изменение доски
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchBoardRequest"
      responses:
        200:
          description: Доска успешно изменена
        401:
          description: Неавторизованный запрос
        404:
          description: Доска не найдена
        400:
          description: Запрос сформирован неверно
        403:
          description: Недостаточно прав
    delete:
      tags:
        - Boards
      description: Удалeние доски
      responses:
        200:
          description: Доска удалена
        401:
          description: Неавторизованный запрос
        403:
          description: Недостаточно прав
  /api/rows:
    post:
      tags:
        - Rows
      description: Добавление столбца на доску
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRowsRequest"
      responses:
        200:
          description: Столбец добавлен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponses"
        401:
          description: Неавторизованный запрос
        400:
          description: Запрос сформирован неверно
  /api/rows/{id}:
    parameters:
      - name: id
        description: ID столбца
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Rows
      description: Получение содержимого столбца
      responses:
        200:
          description: Столбец получен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRowByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Столбец не найден
    patch:
      tags:
        - Rows
      description: Изменение столбца. При carry over запрос посылается на id нового столбца.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRowRequest"
      responses:
        200:
          description: Столбец успешно изменен
        401:
          description: Неавторизованный запрос
        404:
          description: Столбец не найден
        400:
          description: Запрос сформирован неверно
    delete:
      tags:
        - Rows
      description: Удаление столбца
      responses:
        200:
          description: Столбец успешно удален
        401:
          description: Неавторизованный запрос
        404:
          description: Столбец не найден
  /api/tasks:
    post:
      tags:
        - Tasks
      description: Добавление задания
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTasksRequest"
      responses:
        200:
          description: Задание добавлено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponses"
        401:
          description: Неавторизованный запрос
        400:
          description: Запрос сформирован неверно
  /api/tasks/{id}:
    parameters:
      - name: id
        description: ID задания
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Tasks
      description: Получение задания
      responses:
        200:
          description: Задание получено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Задание не найдено
    patch:
      tags:
        - Tasks
      description: Изменение задания
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchTaskRequest"
      responses:
        200:
          description: Задание успешно изменено
        401:
          description: Неавторизованный запрос
        404:
          description: Задание не найдено
        400:
          description: Запрос сформирован неверно
    delete:
      tags:
        - Tasks
      description: Удаление задания
      responses:
        200:
          description: Задание успешно удалено
        401:
          description: Неавторизованный запрос
        404:
          description: Задание не найдено
components:
  schemas:
    LoginRequest:
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    RegistrationRequest:
      properties:
        email:
          type: string
          format: email
        password: 
          type: string
          format: password
        username:
          type: string
      required:
        - email
        - password
        - username
    PatchUserRequest:
      properties:
        email:
          type: string
          format: email
        password: 
          type: string
          format: password
        username:
          type: string

    PostBoardsRequest:
      properties:
        name:
          type: string
      required:
        - name
    PostRowsRequest:
      properties:
        board_id:
          type: integer
        name:
          type: string
        position:
          type: integer
      required:
        - name
        - position
    PostTasksRequest:
      properties:
        row_id:
          type: integer
        name:
          type: string
        position:
          type: integer
      required:
        - name
        - position
    GetUserByIdResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            username:
              type: string
            email:
              type: string
              format: email
            avatar:
              type: string
              format: uri
    GetBoardsResponse:
      type: object
      properties:
        boards:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/BoardOutter"
    GetBoardByIdResponse:
      type: object
      properties:
        board:
          allOf:
            - $ref: "#/components/schemas/Board"
    GetRowByIdResponse:
      type: object
      properties:
        row:
          allOf:
            - $ref: "#/components/schemas/Row"
    GetTaskByIdResponse:
      type: object
      properties:
        task:
          allOf:
            - $ref: "#/components/schemas/Task"
    PostResponses:
      type: object
      properties:
        id:
          type: integer
    
    PatchBoardRequest:
      allOf:
        - $ref: "#/components/schemas/BoardBody"
        - type: object
          properties:
            move:
              type: object
              properties:
                row_id:
                  type: integer
                new_position:
                  type: integer
    PatchTaskRequest:
      $ref: "#/components/schemas/Task"
    PatchRowRequest:
      type: object
      properties:
        name:
          type: string
        #перенос таски с другого столбца
        carry_over:
          type: object
          properties:
            card_id:
              type: integer
            new_position:
              type: integer
        #перенос таски внутри столбца
        move:
          type: object
          properties:
            card_id:
              type: integer
            new_position:
              type: integer
        
      

    Board:
      allOf:
        - $ref: "#/components/schemas/BoardBody" 
        - type: object
          properties:
            rows:
              type: object
              properties:
                0:
                  $ref: "#/components/schemas/Row"
    BoardBody:
      type: object
      properties:
        isPrivate:
          type: boolean
        access:
          $ref: "#/components/schemas/AccessTypes"
        users:
          type: object
          properties:
            owner:
              allOf:
                - $ref: "#/components/schemas/UserOuter"
            admins:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/UserOuter"
            members:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/UserOuter"
        isStared:
          type: boolean
        name:
          type: string
        description:
          type: string        
    Row:
      type: object
      properties:
        id:
          type: integer
        position:
          type: integer
        name:
          type: string
        tasks:
          type: object
          properties:
            0:
              $ref: "#/components/schemas/TaskOuter"
    BoardOutter:
      type: object
      properties:
        id:
          type: integer
        access:
          $ref: "#/components/schemas/AccessTypes"
        isStared:
          type: boolean
        name:
          type: string
        description:
          type: string
    Task:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/UserOuter"
    TaskOuter:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        position:
          type: integer
    AccessTypes:
      type: string
      enum: [guest, member, admin, owner]
    UserOuter:
      type: object
      properties:
        id:
          type: integer
        avatar:
          type: string
          format: uri

    

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []