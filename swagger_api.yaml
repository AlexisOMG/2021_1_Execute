openapi: "3.0.0"
info:
  title: "Бэкенд для Trello"
  version: "0.1.0"
tags:
  - name: Users
  - name: Boards
  - name: Rows
  - name: Tasks
paths:
  /login:
    post:
      tags:
        - Users
      description: Авторизация пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Авторизация прошла успешно

        400:
          description: Запрос сформирован неверно
        403:
          description: Авторизация неуспешна
  /logout:
    delete:
      tags:
        - Users
      description: Выход из сессии
      responses:
        200:
          description: Выход прошел успешно
        401:
          description: Неавторизованный запрос
  /users:
    post:
      tags:
        - Users
      description: Регистрация нового пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        200: 
          description: Пользователь успешно зарегистрирован
        400:
          description: Запрос сформирован неверно
        409:
          description: Уже создан пользователь с таким email
  /users/{id}:
    parameters:
      - name: id
        description: ID пользователя
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Users
      description: Получение информации о пользователе
      responses:
        200:
          description: Информация получена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Пользователь не найден
    patch:
      tags:
        - Users
      description: Изменение информации о пользователе
      responses:
        200:
          description: Информация получена
        403:
          description: Недостаточно прав
        404:
          description: Пользователь не найден
        400:
          description: Запрос сформирован неверно
    delete:
      tags:
        - Users
      description: Удаление пользователя
      responses:
        200:
          description: Информация получена
        404:
          description: Пользователь не найден
        403:
          description: Недостаточно прав
          
  /boards:
    get:
      tags:
        - Boards
      description: Получение списка досок пользователя
      responses:
        200:
          description: Доски успешно получены
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBoardsResponse"
        401:
          description: Неавторизованный запрос
    post:
      tags:
        - Boards
      description: Создание доски
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostBoardsRequest"
      responses:
        200:
          description: Доска успешно создана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponses"
        401:
          description: Неавторизованный запрос
        400:
          description: Запрос сформирован неверно
  /boards/{id}:
    parameters:
      - name: id
        description: Уникальный идентификатор доски
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Boards
      description: Получение доски
      responses:
        200:
          description: Доска успешно получена
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBoardByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Доска не найдена
    patch:
      tags:
        - Boards
      description: Изменение доски
      responses:
        200:
          description: Доска успешно изменена
        401:
          description: Неавторизованный запрос
        404:
          description: Доска не найдена
        400:
          description: Запрос сформирован неверно
    delete:
      tags:
        - Boards
      description: Удалeние доски
      responses:
        200:
          description: Доска удалена
        401:
          description: Неавторизованный запрос
        403:
          description: Недостаточно прав
  /rows:
    post:
      tags:
        - Rows
      description: Добавление столбца на доску
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRowsRequest"
      responses:
        200:
          description: Столбец добавлен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponses"
        401:
          description: Неавторизованный запрос
        400:
          description: Запрос сформирован неверно
  /rows/{id}:
    parameters:
      - name: id
        description: ID столбца
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Rows
      description: Получение содержимого столбца
      responses:
        200:
          description: Столбец получен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRowByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Столбец не найден
    patch:
      tags:
        - Rows
      description: Изменение столбца
      responses:
        200:
          description: Столбец успешно изменен
        401:
          description: Неавторизованный запрос
        404:
          description: Столбец не найден
        400:
          description: Запрос сформирован неверно
    delete:
      tags:
        - Rows
      description: Удаление столбца
      responses:
        200:
          description: Столбец успешно удален
        401:
          description: Неавторизованный запрос
        404:
          description: Столбец не найден
  /tasks:
    post:
      tags:
        - Tasks
      description: Добавление задания
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTasksRequest"
      responses:
        200:
          description: Задание добавлено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponses"
        401:
          description: Неавторизованный запрос
        400:
          description: Запрос сформирован неверно
  /tasks/{id}:
    parameters:
      - name: id
        description: ID задания
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Tasks
      description: Получение задания
      responses:
        200:
          description: Задание получено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskByIdResponse"
        401:
          description: Неавторизованный запрос
        404:
          description: Задание не найдено
    patch:
      tags:
        - Tasks
      description: Изменение задания
      responses:
        200:
          description: Задание успешно изменено
        401:
          description: Неавторизованный запрос
        404:
          description: Задание не найдено
        400:
          description: Запрос сформирован неверно
    delete:
      tags:
        - Tasks
      description: Удаление задания
      responses:
        200:
          description: Задание успешно удалено
        401:
          description: Неавторизованный запрос
        404:
          description: Задание не найдено
components:
  schemas:
    LoginRequest:
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    RegistrationRequest:
      properties:
        email:
          type: string
          format: email
        password: 
          type: string
          format: password
        username:
          type: string
        avatar:
          type: string
          format: binary
      required:
        - email
        - password
        - username
    PostBoardsRequest:
      properties:
        name:
          type: string
      required:
        - name
    PostRowsRequest:
      properties:
        name:
          type: string
      required:
        - name
    PostTasksRequest:
      properties:
        name:
          type: string
      required:
        - name
    GetUserByIdResponse:
      type: object
      properties:
        username:
          type: string
    GetBoardsResponse:
      type: array
      items:
        $ref: "#/components/schemas/BoardOutter"
    GetBoardByIdResponse:
      $ref: "#/components/schemas/Board"
    GetRowByIdResponse:
      $ref: "#/components/schemas/Row"
    GetTaskByIdResponse:
      $ref: "#/components/schemas/Task"
    PostResponses:
      type: object
      properties:
        id:
          type: integer
    

    Board:
      type: object
      properties:
        name:
          type: string
        rows:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              row:
                $ref: "#/components/schemas/Row"
    Row:
      type: object
      properties:
        name:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskOutter"
    BoardOutter:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
    Task:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    TaskOutter:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer

    

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []

  
  